1. CMake의 개요
CMake는 소프트웨어의 빌드, 테스트, 패키징을 지원하는 오픈 소스이자 크로스 플랫폼 빌드 시스템이다. 다양한 플랫폼과 컴파일러를 지원하며, 복잡한 프로젝트에서도 효율적인 빌드 환경을 제공한다.

- 크로스 플랫폼 지원: Windows, macOS, Linux 등 다양한 운영 체제에서 동작한다.
- 컴파일러 독립적: GCC, Clang, MSVC 등 다양한 컴파일러를 지원한다.
- 빌드 시스템 생성: Makefile, Visual Studio 솔루션 파일 등 해당 플랫폼에 맞는 빌드 파일을 생성한다.

2. CMake의 주요 특징

2.1 빌드 구성 파일: CMakeLists.txt
- 간결한 문법: 텍스트 기반의 스크립트 언어로 작성되어 학습 곡선이 완만하다.
- 모듈화: 프로젝트를 서브디렉토리로 분할하여 관리할 수 있다.
- 유연성: 변수, 함수, 매크로 등을 활용하여 복잡한 빌드 로직을 구현할 수 있다.

2.2 아웃 오브 소스 빌드
- 소스 코드와 빌드 결과물을 분리하여 관리할 수 있다.
- 여러 빌드 구성(Debug, Release 등)을 동시에 관리하기 용이하다.

2.3 확장성
- CTest: 자동화된 테스트 실행을 지원한다.
- CPack: 설치 패키지 생성 기능을 제공한다.
- 외부 모듈: FindXXX.cmake를 통해 외부 라이브러리와의 연동이 가능하다.

3. CMake의 동작 과정
CMake는 소스 코드로부터 플랫폼에 맞는 빌드 시스템 파일을 생성하는 역할을 한다. 기본적인 동작 과정은 다음과 같다.

- 프로젝트 구성: 프로젝트의 빌드 설정을 정의하는 CMakeLists.txt 파일을 작성한다.
- 빌드 디렉토리 생성: 소스 코드와 빌드 결과물을 분리하기 위해 별도의 빌드 디렉토리를 만든다.
	mkdir build
	cd build
- CMake 실행: 빌드 디렉토리에서 cmake 명령어를 실행하여 플랫폼에 맞는 빌드 파일을 생성한다.
	cmake [..]
- build: 생성된 빌드 파일을 이용하여 컴파일하고 링크한다.
	make

4. 관련 예제

4.1 기본적인 CMakeLists.txt 작성

	cmake_minimum_required(VERSION 3.10)
	project(MyApp)

	add_executable(myapp main.cpp)

- cmake_minimum_required: 필요한 최소 CMake 버전을 지정한다.
- project: 프로젝트의 이름과 사용 언어를 정의한다.
- add_executable: 실행 파일을 생성하고 소스 파일을 지정한다.

4.2 라이브러리 추가 및 사용

	add_library(mylib STATIC lib.cpp)
	target_include_directories(mylib PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)

	target_link_libraries(myapp PRIVATE mylib)

- add_library: 정적 또는 동적 라이브러리를 생성한다.
- target_include_directories: 타겟의 인클루드 디렉토리를 설정한다.
- target_link_libraries: 실행 파일이나 라이브러리에 다른 라이브러리를 링크한다.

4.3 조건부 설정과 매크로 사용

	if (WIN32)
    	add_definitions(-DPLATFORM_WINDOWS)
	elseif (UNIX)
    	add_definitions(-DPLATFORM_UNIX)
	endif()

	function(print_message msg)
    	message("Message: ${msg}")
	endfunction()

	print_message("Hello, CMake!")

- 조건부 설정: 운영 체제나 환경에 따라 다른 설정을 적용할 수 있다.
- 매크로 및 함수: 반복되는 빌드 로직을 재사용 가능하게 만든다.

5. CMake의 장단점

- 장점
	- 크로스 플랫폼 지원: 하나의 설정으로 다양한 운영 체제에서 빌드 가능하다.
	- 컴파일러 독립성: 여러 컴파일러(GCC, Clang, MSVC 등)를 지원한다.
	- 유지 보수성: 큰 규모의 프로젝트에서도 빌드 설정을 효율적으로 관리할 수 있다.
	- 아웃 오브 소스 빌드: 소스 코드와 빌드 결과물을 분리하여 깨끗한 개발 환경을 유지할 수 있다.
	- 확장성: 외부 라이브러리와 패키지를 쉽게 통합할 수 있으며, 테스트(Ctest)와 패키징(CPack) 기능을 제공한다.

- 단점
	- 디버깅 어려움: 빌드 오류 발생 시 원인을 파악하기 어려울 수 있다.
	- 버전 호환성 문제: 서로 다른 버전의 CMake를 사용하는 팀원 간에 호환성 이슈가 발생할 수 있다.
	- 복잡성: 간단한 프로젝트에서는 오히려 설정이 복잡해질 수 있다.
